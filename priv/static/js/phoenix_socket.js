// Generated by CoffeeScript 1.7.1
(function() {
  var Channel, Socket, app,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Socket = (function(_super) {
    __extends(Socket, _super);

    function Socket() {
      var $rootScope, args, _i;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), $rootScope = arguments[_i++];
      this.$rootScope = $rootScope;
      Socket.__super__.constructor.apply(this, args);
    }

    Socket.prototype.join = function() {
      var chan;
      chan = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Channel, __slice.call(arguments).concat([this], [this.$rootScope]), function(){});
      this.channels.push(chan);
      if (this.isConnected) {
        return this.rejoin(chan);
      }
    };

    return Socket;

  })(Phoenix.Socket);

  Channel = (function(_super) {
    __extends(Channel, _super);

    function Channel() {
      var $rootScope, args, _i;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), $rootScope = arguments[_i++];
      this.$rootScope = $rootScope;
      Channel.__super__.constructor.apply(this, args);
    }

    Channel.prototype.refreshDom = function() {
      return this.$rootScope.$applyAsync();
    };

    Channel.prototype.on = function(event, callback) {
      return Channel.__super__.on.call(this, event, (function(_this) {
        return function() {
          callback.apply(null, arguments);
          return _this.refreshDom();
        };
      })(this));
    };

    return Channel;

  })(Phoenix.Channel);

  app = angular.module("PhoenixSocket", []);

  app.factory("socket", [
    '$rootScope', function($rootScope) {
      return new Socket('/sockets', $rootScope);
    }
  ]);

}).call(this);

//# sourceMappingURL=phoenix_socket.map
